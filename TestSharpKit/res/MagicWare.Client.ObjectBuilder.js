/*Generated by SharpKit 5 v5.00.0000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var MagicWare$ObjectBuilder$FactoryExtensions =
{
    fullname: "MagicWare.ObjectBuilder.FactoryExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            MagicWare.ObjectBuilder.FactoryExtensions.CreateDefaultLifetimeManager = function ()
            {
                return new MagicWare.ObjectBuilder.TransientLifetimeManager.ctor();
            };
        },
        RegisterType$$IFactory$$Type$$String: function (factory, source, name)
        {
            factory.RegisterType(source, source, name, MagicWare.ObjectBuilder.FactoryExtensions.CreateDefaultLifetimeManager());
            return factory;
        },
        RegisterType$$IFactory$$Type$$ILifetimePolicy: function (factory, source, lifetimeManager)
        {
            factory.RegisterType(source, source, null , lifetimeManager);
            return factory;
        },
        RegisterType$$IFactory$$Type$$String$$ILifetimePolicy: function (factory, source, name, lifetimeManager)
        {
            factory.RegisterType(source, source, name, lifetimeManager);
            return factory;
        },
        RegisterType$1$$IFactory$$String: function (TSource, factory, name)
        {
            MagicWare.ObjectBuilder.FactoryExtensions.RegisterType$$IFactory$$Type$$String(factory, Typeof(TSource), name);
            return factory;
        },
        RegisterType$1$$IFactory$$ILifetimePolicy: function (TSource, factory, lifetimeManager)
        {
            MagicWare.ObjectBuilder.FactoryExtensions.RegisterType$$IFactory$$Type$$ILifetimePolicy(factory, Typeof(TSource), lifetimeManager);
            return factory;
        },
        RegisterType$1$$IFactory$$String$$ILifetimePolicy: function (TSource, factory, name, lifetimeManager)
        {
            MagicWare.ObjectBuilder.FactoryExtensions.RegisterType$$IFactory$$Type$$String$$ILifetimePolicy(factory, Typeof(TSource), name, lifetimeManager);
            return factory;
        },
        RegisterType$2$$IFactory$$String: function (TSource, TTarget, factory, name)
        {
            factory.RegisterType(Typeof(TSource), Typeof(TTarget), name, MagicWare.ObjectBuilder.FactoryExtensions.CreateDefaultLifetimeManager());
            return factory;
        },
        RegisterType$2$$IFactory$$ILifetimePolicy: function (TSource, TTarget, factory, lifetimeManager)
        {
            factory.RegisterType(Typeof(TSource), Typeof(TTarget), null , lifetimeManager);
            return factory;
        },
        RegisterType$2$$IFactory$$String$$ILifetimePolicy: function (TSource, TTarget, factory, name, lifetimeManager)
        {
            factory.RegisterType(Typeof(TSource), Typeof(TTarget), name, lifetimeManager);
            return factory;
        },
        RegisterInstance$1: function (TSource, factory, existing, name)
        {
            MagicWare.ObjectBuilder.FactoryExtensions.RegisterType$1$$IFactory$$String$$ILifetimePolicy(TSource, factory, name, new MagicWare.ObjectBuilder.SingletonLifetimeManager.ctor$$Object(existing));
            return factory;
        },
        Resolve$1: function (T, factory, name)
        {
            return Cast(factory.Resolve(Typeof(T), name), T);
        },
        ResolveAll$1: function (T, factory)
        {
            return System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Object.ctor, T, factory.ResolveAll(Typeof(T)), function (t)
            {
                return Cast(t, T);
            });
        },
        BuildUp$$IFactory$$Type$$Object: function (factory, t, existing)
        {
            return factory.BuildUp(t, existing, null);
        },
        BuildUp$1$$IFactory$$T$$String: function (T, factory, target, name)
        {
            return Cast(factory.BuildUp(target.GetType(), target, name), T);
        }
    },
    assemblyName: "MagicWare.Client.ObjectBuilder",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$FactoryExtensions);
var MagicWare$ObjectBuilder$FactoryProvider =
{
    fullname: "MagicWare.ObjectBuilder.FactoryProvider",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            MagicWare.ObjectBuilder.FactoryProvider.current = null;
        },
        Current$$: "MagicWare.ObjectBuilder.IFactory",
        get_Current: function ()
        {
            return MagicWare.ObjectBuilder.FactoryProvider.current;
        },
        SetCurrentFactory: function (factory)
        {
            MagicWare.ObjectBuilder.FactoryProvider.current = MagicWare.ObjectBuilder.FactoryExtensions.RegisterInstance$1(MagicWare.ObjectBuilder.IFactory.ctor, factory, factory, null);
        }
    },
    assemblyName: "MagicWare.Client.ObjectBuilder",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$FactoryProvider);
var MagicWare$ObjectBuilder$IFactory = {fullname: "MagicWare.ObjectBuilder.IFactory", baseTypeName: "System.Object", assemblyName: "MagicWare.Client.ObjectBuilder", Kind: "Interface"};
JsTypes.push(MagicWare$ObjectBuilder$IFactory);
var MagicWare$ObjectBuilder$ILifetimePolicy = {fullname: "MagicWare.ObjectBuilder.ILifetimePolicy", baseTypeName: "System.Object", assemblyName: "MagicWare.Client.ObjectBuilder", Kind: "Interface"};
JsTypes.push(MagicWare$ObjectBuilder$ILifetimePolicy);
var MagicWare$ObjectBuilder$DependencyAttribute =
{
    fullname: "MagicWare.ObjectBuilder.DependencyAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Name = null;
            System.Attribute.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        ctor$$String: function (name)
        {
            this._Name = null;
            System.Attribute.ctor.call(this);
            this.set_Name(name);
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$DependencyAttribute);
var MagicWare$ObjectBuilder$JavascriptFactory =
{
    fullname: "MagicWare.ObjectBuilder.JavascriptFactory",
    baseTypeName: "System.Object",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    interfaceNames: ["MagicWare.ObjectBuilder.IFactory"],
    Kind: "Class",
    definition:
    {
        ctor$$Dictionary$2: function (registries)
        {
            this.registries = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            System.Object.ctor.call(this);
            this.registries = registries;
        },
        ctor: function ()
        {
            this.registries = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            MagicWare.ObjectBuilder.JavascriptFactory.ctor$$Dictionary$2.call(this, new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor));
        },
        RegisterType: function (source, target, name, lifetimeManager)
        {
            var key = this.GetKey(source, name);
            var registry = (function ()
            {
                var $v1 = new MagicWare.ObjectBuilder.FactoryRegistry.ctor();
                $v1.set_Name(name);
                $v1.set_Target(target);
                $v1.set_LifetimeManager(lifetimeManager);
                $v1.set_Properties(null);
                return $v1;
            }).call(this);
            if (!this.registries.ContainsKey(key))
                this.registries.Add(key, new System.Collections.Generic.List$1.ctor(MagicWare.ObjectBuilder.FactoryRegistry.ctor));
            this.registries.get_Item$$TKey(key).Add(registry);
            if (source.get_FullName() != target.get_FullName())
                this.RegisterType(target, target, name, lifetimeManager);
            return this;
        },
        Resolve: function (type, name)
        {
            return this.Build$$Type$$String(type, name);
        },
        ResolveAll: function (type)
        {
            var result = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            var key = this.GetKey(type, null);
            if (!this.registries.ContainsKey(key))
                return result;
            var $it1 = this.registries.get_Item$$TKey(key).GetEnumerator();
            while ($it1.MoveNext())
            {
                var registry = $it1.get_Current();
                result.Add(this.Build$$FactoryRegistry(registry));
            }
            return result;
        },
        BuildUp: function (type, existing, name)
        {
            var key = this.GetKey(type, name);
            var properties = null;
            if (!this.registries.ContainsKey(key))
            {
                if (type.get_IsClass())
                    properties = this.BuildPropertyInjection(type, name);
                else
                    throw $CreateException(new MagicWare.ObjectBuilder.FactoryException.ctor(System.String.Format$$String$$Object("{0} is not registered!", type.get_FullName())), new Error());
            }
            else
            {
                var registry = System.Linq.Enumerable.Last$1$$IEnumerable$1(MagicWare.ObjectBuilder.FactoryRegistry.ctor, this.registries.get_Item$$TKey(key));
                properties = registry.get_Properties();
            }
            if (properties != null)
            {
                var $it2 = properties.GetEnumerator();
                while ($it2.MoveNext())
                {
                    var subRegistry = $it2.get_Current();
                    subRegistry.get_Property().SetValue$$Object$$Object$$Object$Array(existing, this.Build$$Type$$String(subRegistry.get_Target(), subRegistry.get_Name()), null);
                }
            }
            return existing;
        },
        CreateChildFactory: function ()
        {
            return new MagicWare.ObjectBuilder.JavascriptFactory.ctor$$Dictionary$2(this.CopyRegistrations());
        },
        GetKey: function (source, name)
        {
            var result = source.get_FullName();
            if (!System.String.IsNullOrEmpty(name))
                result += "+" + name;
            return result;
        },
        BuildPropertyInjection: function (type, name)
        {
            var result = new System.Collections.Generic.List$1.ctor(MagicWare.ObjectBuilder.FactorySubRegistry.ctor);
            for (var $i4 = 0, $t4 = type.GetProperties(), $l4 = $t4.length, property = $t4[$i4]; $i4 < $l4; $i4++, property = $t4[$i4])
            {
                var attribute = null;
                var attrArray = property.GetCustomAttributes$$Boolean(false);
                if (attrArray != null)
                {
                    for (var $i5 = 0, $l5 = attrArray.length, attr = attrArray[$i5]; $i5 < $l5; $i5++, attr = attrArray[$i5])
                    {
                        if (attr.GetType().get_Name() == Typeof(MagicWare.ObjectBuilder.DependencyAttribute.ctor).get_Name())
                        {
                            attribute = attr;
                            break;
                        }
                    }
                }
                if (attribute != null)
                {
                    result.Add((function ()
                    {
                        var $v2 = new MagicWare.ObjectBuilder.FactorySubRegistry.ctor();
                        $v2.set_Property(property);
                        $v2.set_Target(property.get_PropertyType());
                        $v2.set_Name(attribute.get_Name());
                        return $v2;
                    }).call(this));
                }
            }
            return result;
        },
        IsRegistered: function (type, name)
        {
            return this.registries.ContainsKey(this.GetKey(type, name));
        },
        Build$$Type$$String: function (type, name)
        {
            var registry = null;
            var key = this.GetKey(type, name);
            if (this.registries.ContainsKey(key))
            {
                var items = this.registries.get_Item$$TKey(key);
                registry = System.Linq.Enumerable.Last$1$$IEnumerable$1(MagicWare.ObjectBuilder.FactoryRegistry.ctor, items);
            }
            else if (type.get_IsClass())
            {
                registry = (function ()
                {
                    var $v3 = new MagicWare.ObjectBuilder.FactoryRegistry.ctor();
                    $v3.set_Name(name);
                    $v3.set_Target(type);
                    $v3.set_LifetimeManager(new MagicWare.ObjectBuilder.TransientLifetimeManager.ctor());
                    $v3.set_Properties(null);
                    return $v3;
                }).call(this);
            }
            if (registry == null)
                throw $CreateException(new MagicWare.ObjectBuilder.FactoryException.ctor(System.String.Format$$String$$Object("{0} is NOT registered and is NOT class, so it\'s NOT instantiable!", type.get_FullName())), new Error());
            return this.Build$$FactoryRegistry(registry);
        },
        Build$$FactoryRegistry: function (registry)
        {
            var result = registry.get_LifetimeManager().GetValue();
            if (result == null)
            {
                result = System.Activator.CreateInstance$$Type(registry.get_Target());
                registry.get_LifetimeManager().SetValue(result);
            }
            if (registry.get_Properties() == null)
                registry.set_Properties(this.BuildPropertyInjection(registry.get_Target(), registry.get_Name()));
            var $it5 = registry.get_Properties().GetEnumerator();
            while ($it5.MoveNext())
            {
                var subRegistry = $it5.get_Current();
                subRegistry.get_Property().SetValue$$Object$$Object$$Object$Array(result, this.Build$$Type$$String(subRegistry.get_Target(), subRegistry.get_Name()), null);
            }
            return result;
        },
        CopyRegistrations: function ()
        {
            var result = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            var $it6 = this.registries.GetEnumerator();
            while ($it6.MoveNext())
            {
                var item = $it6.get_Current();
                var items = new System.Collections.Generic.List$1.ctor(MagicWare.ObjectBuilder.FactoryRegistry.ctor);
                var $it7 = item.get_Value().GetEnumerator();
                while ($it7.MoveNext())
                {
                    var single = $it7.get_Current();
                    var newItem = (function ()
                    {
                        var $v4 = new MagicWare.ObjectBuilder.FactoryRegistry.ctor();
                        $v4.set_Name(single.get_Name());
                        $v4.set_LifetimeManager(single.get_LifetimeManager());
                        $v4.set_Target(single.get_Target());
                        $v4.set_Properties(new System.Collections.Generic.List$1.ctor(MagicWare.ObjectBuilder.FactorySubRegistry.ctor));
                        return $v4;
                    }).call(this);
                    if (single.get_Properties() == null)
                        single.set_Properties(this.BuildPropertyInjection(single.get_Target(), single.get_Name()));
                    var $it8 = single.get_Properties().GetEnumerator();
                    while ($it8.MoveNext())
                    {
                        var property = $it8.get_Current();
                        newItem.get_Properties().Add((function ()
                        {
                            var $v5 = new MagicWare.ObjectBuilder.FactorySubRegistry.ctor();
                            $v5.set_Name(property.get_Name());
                            $v5.set_Property(property.get_Property());
                            $v5.set_Target(property.get_Target());
                            return $v5;
                        }).call(this));
                    }
                    items.Add(newItem);
                }
                result.Add(item.get_Key(), items);
            }
            return result;
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$JavascriptFactory);
var MagicWare$ObjectBuilder$SingletonLifetimeManager$1 =
{
    fullname: "MagicWare.ObjectBuilder.SingletonLifetimeManager$1",
    baseTypeName: "System.Object",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    interfaceNames: ["MagicWare.ObjectBuilder.ILifetimePolicy"],
    Kind: "Class",
    definition:
    {
        ctor: function (T)
        {
            this.T = T;
            this.instance = null;
            this.initialize = null;
            System.Object.ctor.call(this);
        },
        ctor$$T: function (T, instance)
        {
            this.T = T;
            this.instance = null;
            this.initialize = null;
            System.Object.ctor.call(this);
            this.SetValue(instance);
        },
        ctor$$Action$1: function (T, initialize)
        {
            this.T = T;
            this.instance = null;
            this.initialize = null;
            System.Object.ctor.call(this);
            this.initialize = initialize;
        },
        ctor$$T$$Action$1: function (T, instance, initialize)
        {
            this.T = T;
            this.instance = null;
            this.initialize = null;
            MagicWare.ObjectBuilder.SingletonLifetimeManager$1.ctor$$T.call(this, this.T, instance);
            this.initialize = initialize;
        },
        GetValue: function ()
        {
            return this.instance;
        },
        RemoveValue: function ()
        {
            this.instance = null;
        },
        SetValue: function (newValue)
        {
            this.instance = newValue;
            if (this.initialize != null)
                this.initialize(Cast(newValue, this.T));
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$SingletonLifetimeManager$1);
var MagicWare$ObjectBuilder$SingletonLifetimeManager =
{
    fullname: "MagicWare.ObjectBuilder.SingletonLifetimeManager",
    baseTypeName: "MagicWare.ObjectBuilder.SingletonLifetimeManager$1",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            MagicWare.ObjectBuilder.SingletonLifetimeManager$1.ctor.call(this, System.Object.ctor);
        },
        ctor$$Object: function (instance)
        {
            MagicWare.ObjectBuilder.SingletonLifetimeManager$1.ctor$$T.call(this, System.Object.ctor, instance);
        },
        ctor$$Action$1$Object: function (initialize)
        {
            MagicWare.ObjectBuilder.SingletonLifetimeManager$1.ctor$$Action$1.call(this, System.Object.ctor, initialize);
        },
        ctor$$Object$$Action$1$Object: function (instance, initialize)
        {
            MagicWare.ObjectBuilder.SingletonLifetimeManager$1.ctor$$T$$Action$1.call(this, System.Object.ctor, instance, initialize);
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$SingletonLifetimeManager);
var MagicWare$ObjectBuilder$TransientLifetimeManager =
{
    fullname: "MagicWare.ObjectBuilder.TransientLifetimeManager",
    baseTypeName: "System.Object",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    interfaceNames: ["MagicWare.ObjectBuilder.ILifetimePolicy"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        GetValue: function ()
        {
            return null;
        },
        RemoveValue: function ()
        {
        },
        SetValue: function (newValue)
        {
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$TransientLifetimeManager);
var MagicWare$ObjectBuilder$GetterLifetimeManager =
{
    fullname: "MagicWare.ObjectBuilder.GetterLifetimeManager",
    baseTypeName: "MagicWare.ObjectBuilder.TransientLifetimeManager",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    interfaceNames: ["MagicWare.ObjectBuilder.ILifetimePolicy"],
    Kind: "Class",
    definition:
    {
        ctor: function (getter)
        {
            this.getter = null;
            MagicWare.ObjectBuilder.TransientLifetimeManager.ctor.call(this);
            this.getter = getter;
        },
        GetValue: function ()
        {
            return this.getter();
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$GetterLifetimeManager);
var MagicWare$ObjectBuilder$FactoryException =
{
    fullname: "MagicWare.ObjectBuilder.FactoryException",
    baseTypeName: "System.Exception",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    Kind: "Class",
    definition:
    {
        ctor: function (message)
        {
            System.Exception.ctor$$String.call(this, message);
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$FactoryException);
var MagicWare$ObjectBuilder$FactoryRegistry =
{
    fullname: "MagicWare.ObjectBuilder.FactoryRegistry",
    baseTypeName: "System.Object",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Target = null;
            this._Name = null;
            this._LifetimeManager = null;
            this._Properties = null;
            System.Object.ctor.call(this);
        },
        Target$$: "System.Type",
        get_Target: function ()
        {
            return this._Target;
        },
        set_Target: function (value)
        {
            this._Target = value;
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        },
        LifetimeManager$$: "MagicWare.ObjectBuilder.ILifetimePolicy",
        get_LifetimeManager: function ()
        {
            return this._LifetimeManager;
        },
        set_LifetimeManager: function (value)
        {
            this._LifetimeManager = value;
        },
        Properties$$: "System.Collections.Generic.List`1[[MagicWare.ObjectBuilder.FactorySubRegistry]]",
        get_Properties: function ()
        {
            return this._Properties;
        },
        set_Properties: function (value)
        {
            this._Properties = value;
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$FactoryRegistry);
var MagicWare$ObjectBuilder$FactorySubRegistry =
{
    fullname: "MagicWare.ObjectBuilder.FactorySubRegistry",
    baseTypeName: "System.Object",
    assemblyName: "MagicWare.Client.ObjectBuilder",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Property = null;
            this._Target = null;
            this._Name = null;
            System.Object.ctor.call(this);
        },
        Property$$: "System.Reflection.PropertyInfo",
        get_Property: function ()
        {
            return this._Property;
        },
        set_Property: function (value)
        {
            this._Property = value;
        },
        Target$$: "System.Type",
        get_Target: function ()
        {
            return this._Target;
        },
        set_Target: function (value)
        {
            this._Target = value;
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        set_Name: function (value)
        {
            this._Name = value;
        }
    }
};
JsTypes.push(MagicWare$ObjectBuilder$FactorySubRegistry);
